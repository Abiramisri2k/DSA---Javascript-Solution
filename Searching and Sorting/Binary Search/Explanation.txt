Binary Search:

Given an array of integers nums which is sorted in ascending order, and an integer target, 
write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.
You must write an algorithm with O(log n) runtime complexity.

Approach:

1. Start with two pointers: left = 0 and right = nums.length - 1.
2. While left <= right:
   * Find the middle index: middle = Math.floor((left + right) / 2).
   * If nums[middle] === target, return middle.
   * If target < nums[middle], move the search to the left half by setting right = middle - 1.
   * Otherwise, move the search to the right half by setting left = middle + 1.
3. If the loop ends without finding the target, return -1.

Dry run:

nums = [1, 3, 5, 7, 9]
target = 7

left = 0, right = 4 (since length = 5)

Iteration 1

* middle = Math.floor((0 + 4) / 2) = 2
* nums[2] = 5
* Compare: 5 === 7 ? → No
* 7 > 5 → search right half
* Update: left = middle + 1 = 3, right = 4

Iteration 2

* middle = Math.floor((3 + 4) / 2) = 3
* nums[3] = 7
* Compare: 7 === 7 ? → Match found → Return 3

Final Output: 3