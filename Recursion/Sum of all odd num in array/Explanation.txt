Problem Statement:

Write a recursive function sum(n) that calculates the sum of all odd numbers in an array arr up to index n.

Approach:

* Use recursion to move backward through the array.
* Base Case: If n == 0, return arr[0] if it’s odd, otherwise return 0.
* Recursive Case: At each step, check if arr[n] is odd:
  * If yes → return arr[n] + sum(n - 1)
  * If no → return sum(n - 1)
* This way, only odd numbers are added while recursion continues until the base case.

Dry run:

arr = [5, 2, 6, 1, 3]:


Call → sum(4)

arr[4] = 3 → odd → 3 + sum(3)

Call → sum(3)

arr[3] = 1 → odd → 1 + sum(2)

Call → sum(2)

arr[2] = 6 → even → 0 + sum(1)

Call → sum(1)

arr[1] = 2 → even → 0 + sum(0)

Call → sum(0)

arr[0] = 5 → odd → return 5


sum(0) = 5

sum(1) = 0 + 5 = 5

sum(2) = 0 + 5 = 5

sum(3) = 1 + 5 = 6

sum(4) = 3 + 6 = 9

Final Output: 9