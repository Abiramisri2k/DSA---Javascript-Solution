Problem Statement:

Write a recursive function isPowerOfTwo(n) that returns true if n is a power of 2, otherwise false.

Approach:

* A number is a power of 2 if it can be repeatedly divided by 2 until it becomes 1.
* Base Case: If n == 1, return true (since 2^0 = 1).
* Invalid Case: If n < 1 or n % 2 != 0, return false (not a power of two).
* Recursive Case: Otherwise, call isPowerOfTwo(n / 2) to keep dividing until it reaches 1.

Dry Run:

Case 1: isPowerOfTwo(8)

* n = 8 → not 1, not < 1, divisible by 2 → isPowerOfTwo(4)
* n = 4 → divisible by 2 → isPowerOfTwo(2)
* n = 2 → divisible by 2 → isPowerOfTwo(1)
* n = 1 → base case → true

Output = true

Case 2: isPowerOfTwo(18)

* n = 18 → not 1, not < 1, divisible by 2 → isPowerOfTwo(9)
* n = 9 → not 1, not < 1, but 9 % 2 !== 0 → return false

Output = false