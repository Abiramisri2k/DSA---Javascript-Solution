Problem statement:

You are given two integer arrays, nums1 and nums2, both sorted in non-decreasing order. Along with these, you are given two integers m and n, where:
 --> m is the number of valid elements in nums1.
 --> n is the number of elements in nums2.
Your task is to merge nums2 into nums1 so that nums1 becomes a single sorted array in non-decreasing order.
nums1 has a total size of m + n.
The first m positions contain the actual elements to be merged.
The last n positions are placeholders (set to 0) and should be ignored.
nums2 has exactly n elements.
The merged result must be stored directly in nums1 (do not return a new array).

Optimal Approach:

* Start with two pointers at the end of both arrays (`p1 = m-1`, `p2 = n-1`).
* Use index `i = m+n-1` to fill `nums1` from the back.
* Compare elements from `nums1[p1]` and `nums2[p2]`, place the larger one at `nums1[i]`.
* Decrement the corresponding pointer (`p1--` or `p2--`).
* Stop early if `p2 < 0` (all elements of `nums2` are placed).
* If `p1` runs out, remaining elements of `nums2` are still copied.
* Time complexity: `O(m+n)`.
* Space complexity: `O(1)`.

Dry run:

Input:
nums1 = [2,5,6,0,0,0], m = 3
nums2 = [1,2,3], n = 3


Initial setup

* `p1 = m - 1 = 2` → points to `6`
* `p2 = n - 1 = 2` → points to `3`
* Loop index `i = m + n - 1 = 5`

Step-by-step execution

i = 5
* Compare `nums1[p1]=6` and `nums2[p2]=3`
* 6 > 3 → place 6 at `nums1[5]`
* `nums1 = [2,5,6,0,0,6]`
* `p1 = 1`

i = 4
* Compare `nums1[p1]=5` and `nums2[p2]=3`
* 5 > 3 → place 5 at `nums1[4]`
* `nums1 = [2,5,6,0,5,6]`
* `p1 = 0`

i = 3
* Compare `nums1[p1]=2` and `nums2[p2]=3`
* 2 > 3 ❌ → place 3 at `nums1[3]`
* `nums1 = [2,5,6,3,5,6]`
* `p2 = 1`

i = 2
* Compare `nums1[p1]=2` and `nums2[p2]=2`
* 2 > 2 ❌ → place 2 at `nums1[2]`
* `nums1 = [2,5,2,3,5,6]`
* `p2 = 0`

i = 1
* Compare `nums1[p1]=2` and `nums2[p2]=1`
* 2 > 1 ✅ → place 2 at `nums1[1]`
* `nums1 = [2,2,2,3,5,6]`
* `p1 = -1`

i = 0
* `p1 < 0`, so copy from `nums2[p2]`
*  Place 1 at `nums1[0]`
* `nums1 = [1,2,2,3,5,6]`
* `p2 = -1` → loop breaks

Final Result : nums1 = [1,2,2,3,5,6]

