Problem statement:

You are given two integer arrays, nums1 and nums2, both sorted in non-decreasing order. Along with these, you are given two integers m and n, where:
 --> m is the number of valid elements in nums1.
 --> n is the number of elements in nums2.
Your task is to merge nums2 into nums1 so that nums1 becomes a single sorted array in non-decreasing order.
nums1 has a total size of m + n.
The first m positions contain the actual elements to be merged.
The last n positions are placeholders (set to 0) and should be ignored.
nums2 has exactly n elements.
The merged result must be stored directly in nums1 (do not return a new array).

Approach: 

Replace the extra zeros in nums1 (starting from index m) with all elements of nums2, and then sort the entire nums1 array.

Dry run:

Input:
nums1 = [2,5,6,0,0,0], m = 3
nums2 = [1,2,3], n = 3

Step 1: Loop to overwrite zeros
for (let i = m; i < nums1.length; i++) {
  nums1[i] = nums2[i - m];
}

i = 3 → nums1[3] = nums2[0] = 1
nums1 = [2,5,6,1,0,0]

i = 4 → nums1[4] = nums2[1] = 2
nums1 = [2,5,6,1,2,0]

i = 5 → nums1[5] = nums2[2] = 3
nums1 = [2,5,6,1,2,3]

After loop:
nums1 = [2,5,6,1,2,3]

Step 2: Sort nums1
nums1.sort((a, b) => a - b);

(a, b) => a - b means:

If a < b, return negative → a comes first.
If a > b, return positive → b comes first.

* Compare 2 and 5 → keep [2,5].
* Compare 6 → [2,5,6].
* Compare 1 → smallest → [1,2,5,6].
* Compare 2 → goes after 1 but before 5 → [1,2,2,5,6].
* Compare 3 → goes between 2 and 5 → [1,2,2,3,5,6].

Sorting gives:
nums1 = [1,2,2,3,5,6]

Final Result;
[1,2,2,3,5,6]
