Problem Statement:

You are given a non-empty array of integers where every element appears exactly twice, except for one element that appears only once. 
The task is to find that unique element. The solution should work in linear time and use only constant extra space.

Approach:

* Create a hash map to store counts.
* Loop through array and update counts.
* Loop again to find the number with count = 1.
* Return that number. 

Dry run:

Input:

nums = [4, 1, 2, 1, 2]

Build hash map:
Loop through array and count occurrences.
* i = 0 → 4 → not in hash → hash = {4: 1}
* i = 1 → 1 → not in hash → hash = {4: 1, 1: 1}
* i = 2 → 2 → not in hash → hash = {4: 1, 1: 1, 2: 1}
* i = 3 → 1 → already in hash → increment → hash = {4: 1, 1: 2, 2: 1}
* i = 4 → 2 → already in hash → increment → hash = {4: 1, 1: 2, 2: 2}

Final hash:
{ 4: 1, 1: 2, 2: 2 }
Find number with count = 1

Loop again:

i = 0 → 4 → hash[4] = 1 → return 4

Output: 4
