Problem Statement:

You are given an array prices, where prices[i] represents the price of a stock on the i-th day.
Your task is to find the maximum profit you can earn by:
  --> Buying the stock on one day, and
  --> Selling it on a later day.
If no profit can be made, return 0.

Optimal Approach:

1. Keep track of the minimum price seen so far (min).
2. Keep track of the maximum profit seen so far (maxprofit).
3. Loop through the prices:
  --> Calculate today’s profit = prices[i] - min.
  --> If it’s greater than maxprofit, update maxprofit.
  --> If today’s price is less than min, update min.
4. Return maxprofit at the end.

Dry run : 

prices = [7,1,5,3,6,4].

Initial setup:
maxProfit = 0, min = prices[0]

i = 1 → price = 1
Profit = 1 - 7 = -6 → not better than maxprofit
Update min = 1 (new lowest price)
Current → min=1, maxprofit=0

i = 2 → price = 5
Profit = 5 - 1 = 4 → update maxprofit = 4
min stays 1
Current → min=1, maxprofit=4

i = 3 → price = 3
Profit = 3 - 1 = 2 → not better than 4
min stays 1
Current → min=1, maxprofit=4

i = 4 → price = 6
Profit = 6 - 1 = 5 → update maxprofit = 5
min stays 1
Current → min=1, maxprofit=5

i = 5 → price = 4
Profit = 4 - 1 = 3 → not better than 5
min stays 1
Current → min=1, maxprofit=5

Final Answer:
maxprofit = 5