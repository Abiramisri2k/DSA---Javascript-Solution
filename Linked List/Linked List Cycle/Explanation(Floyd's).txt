Problem Statement:

Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. 
Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Approach:

1. Use Floyd’s Cycle Detection (also called the Tortoise and Hare algorithm).
2. Use two pointers: slow moves one step, fast moves two steps.
3. If there is a cycle, they will eventually meet. If fast or fast.next becomes null, there’s no cycle.

Dry run:

Initialization:

slow = 1
fast = 2
Condition: slow !== fast → 1 !== 2  enter loop

Iteration 1:

Check: fast != null && fast.next != null → (2 and 3 exist) 
Move slow = slow.next = 2
Move fast = fast.next.next = 4
State: slow = 2, fast = 4
Loop continues (2 !== 4)

Iteration 2:

Check: fast != null && fast.next != null → (4 and 5 exist) 
Move slow = 3
Move fast = 2 (since 4.next = 5 and 5.next = 2)
State: slow = 3, fast = 2
Loop continues (3 !== 2)

Iteration 3:

Check: fast != null && fast.next != null → (2 and 3 exist)
Move slow = 4
Move fast = 4 (2 → 3 → 4)
State: slow = 4, fast = 4
Condition: slow === fast → loop ends.

Return
return true;

Output: true